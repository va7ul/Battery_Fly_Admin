{"version":3,"file":"static/js/903.eae289ba.chunk.js","mappings":"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","sources":["components/Modals/ModalConfirm/ModalConfirm.tsx","components/Shared/NoRowsOverlay/NoRowsOverlay.tsx","components/BannersPage/Banners.styled.ts","redux/hero/heroSelectors.ts","components/BannersPage/AddBannerButton.tsx","components/BannersPage/Banners.tsx","pages/BannersPage.tsx"],"sourcesContent":["import { Button, Dialog, DialogActions, DialogTitle } from '@mui/material';\n\ntype ModalConfirmProps = {\n  open: boolean;\n  handleClose: () => void;\n  handleAction: () => void;\n  text: string;\n};\n\nexport const ModalConfirm: React.FC<ModalConfirmProps> = ({\n  open,\n  handleClose,\n  handleAction,\n  text,\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      slotProps={{\n        backdrop: {\n          sx: {\n            backgroundColor: 'rgba(0, 0, 0, 0.75)',\n          },\n        },\n      }}\n      sx={{\n        '& .MuiDialog-paper': {\n          minWidth: '400px',\n          gap: '10px',\n          bgcolor: 'secondary.main',\n          borderRadius: '18px',\n        },\n      }}\n    >\n      <DialogTitle id=\"alert-dialog-title\">{text}</DialogTitle>\n      <DialogActions>\n        <Button\n          onClick={handleAction}\n          sx={{\n            color: 'text.primary',\n            '&:hover': { color: 'hoverColor.main' },\n          }}\n        >\n          Підтвердити\n        </Button>\n        <Button\n          onClick={handleClose}\n          sx={{\n            color: 'text.primary',\n            '&:hover': { color: 'hoverColor.main' },\n          }}\n        >\n          Скасувати\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { styled } from '@mui/material/styles';\nimport { Box } from '@mui/material';\n\nconst StyledGridOverlay = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  height: '100%',\n  '& .ant-empty-img-1': {\n    fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626',\n  },\n  '& .ant-empty-img-2': {\n    fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959',\n  },\n  '& .ant-empty-img-3': {\n    fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343',\n  },\n  '& .ant-empty-img-4': {\n    fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c',\n  },\n  '& .ant-empty-img-5': {\n    fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\n    fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff',\n  },\n}));\n\nexport const CustomNoRowsOverlay = () => {\n  return (\n    <StyledGridOverlay>\n      <svg\n        width=\"120\"\n        height=\"100\"\n        viewBox=\"0 0 184 152\"\n        aria-hidden\n        focusable=\"false\"\n      >\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g transform=\"translate(24 31.67)\">\n            <ellipse\n              className=\"ant-empty-img-5\"\n              cx=\"67.797\"\n              cy=\"106.89\"\n              rx=\"67.797\"\n              ry=\"12.668\"\n            />\n            <path\n              className=\"ant-empty-img-1\"\n              d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\n            />\n            <path\n              className=\"ant-empty-img-2\"\n              d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\n            />\n            <path\n              className=\"ant-empty-img-3\"\n              d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\n            />\n          </g>\n          <path\n            className=\"ant-empty-img-3\"\n            d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\n          />\n          <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\n            <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\n            <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\n          </g>\n        </g>\n      </svg>\n      <Box sx={{ mt: 1 }}>Немає даних</Box>\n    </StyledGridOverlay>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n  width: 100%;\n  height: 100%;\n  background: inherit;\n  border: none;\n  outline: none;\n` ;\n","import { RootState } from 'redux/store';\n\nexport const selectHero = (state: RootState) => state.hero.items;\nexport const selectLoading = (state: RootState) => state.hero.isLoading;\nexport const selectError = (state: RootState) => state.hero.error;","import AddIcon from '@mui/icons-material/Add';\nimport { Button } from '@mui/material';\nimport { randomId } from '@mui/x-data-grid-generator';\nimport {\n  GridRowModes,\n  GridRowsProp,\n  GridRowModesModel,\n} from '@mui/x-data-grid';\n\ninterface AddBannerProps {\n  setRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\n  setRowModesModel: (\n    newModel: (oldModel: GridRowModesModel) => GridRowModesModel\n  ) => void;\n}\n\nexport  const AddBannerButton = (props: AddBannerProps) => {\n   const { setRows, setRowModesModel } = props;\n\n    const handleClick = () => {\n      const id = randomId();\n      setRows((oldRows: GridRowsProp) => [\n        ...oldRows,\n        { id, image: '', text: '', isNew: true },\n      ]);\n      setRowModesModel((oldModel) => ({\n        ...oldModel,\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: 'text' },\n      }));\n    };\n\n    return (\n      <Button\n        variant=\"contained\"\n        startIcon={<AddIcon />}\n        onClick={handleClick}\n        sx={{\n          marginRight: 'auto',\n          marginLeft: '10px',\n          '&:hover': {\n            backgroundColor: 'primary.main',\n          },\n        }}\n      >\n        Додати банер\n      </Button>\n    );\n  };\n","import { useState, ChangeEvent } from 'react';\nimport Box from '@mui/material/Box';\n\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport { StyledInput } from './Banners.styled';\nimport {\n  GridRowModes,\n  DataGrid,\n  GridActionsCellItem,\n  GridRowEditStopReasons,\n  GridRowId,\n  GridColDef,\n  GridRowsProp,\n  GridRowModesModel,\n  GridEventListener\n} from '@mui/x-data-grid';\n\nimport { deleteHero, editHero, addHero } from '../../redux/hero/heroOperations';\nimport { selectHero } from '../../redux/hero/heroSelectors';\nimport { CustomNoRowsOverlay } from 'components/Shared/NoRowsOverlay/NoRowsOverlay';\nimport { ModalConfirm } from 'components/Modals/ModalConfirm/ModalConfirm';\nimport { useTypedDispatch, useTypedSelector } from '../../redux/hooks';\nimport { AddBannerButton } from './AddBannerButton';\n\n\n\nexport const Banners = () => {\n  const dispatch = useTypedDispatch();\n  const images = useTypedSelector(selectHero);\n  const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\n  const [open, setOpen] = useState(false);\n  const [idToDelete, setIdToDelete] = useState<GridRowId>('');\n\n  const initialRows: GridRowsProp = images.map(({ _id, image, text }) => ({\n    id: _id,\n    image,\n    text,\n  }));\n\n  const [rows, setRows] = useState(initialRows);\n  const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const openModalConfirm = (id: GridRowId) => () => {\n    setOpen(true);\n    setIdToDelete(id);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteHero(idToDelete as string));\n  };\n\n  const handleCancelClick = (id: GridRowId) => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n  };\n\n  const handleEditClick = (id: GridRowId)=> () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleRowModesModelChange = (newRowModesModel: GridRowModesModel) => {\n    setRowModesModel(newRowModesModel);\n  };\n\n  type Image = {\n  [key: string]: { url: string | ArrayBuffer | null, file: File}\n}\n\n  const [image, setImage] = useState<Image>({});\n  const [text, setText] = useState<{ [key: GridRowId]: string }>({});\n  let file: File;\n  const handleFileChange = (id: GridRowId) => (e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n   \n    if (e.target.files) {\n       file = e.target.files[0];\n    }\n   \n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImage({ [id]: { url: reader.result, file } });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n    const handleSaveClick = (id: GridRowId) => async () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n    const newRow = rows.find((row) => row.isNew && row.text === '');\n    const formData = new FormData();\n\n    if (image[id]?.file) {\n      formData.append('image', image[id].file);\n    }\n    formData.append('text', text[id] || rows.find((row) => row.id === id)?.text);\n\n    try {\n      if (newRow) {\n        await dispatch(addHero(formData));\n      } else {\n        await dispatch(editHero({ id: id as string, formData }));\n      }\n    } catch (error) {\n      console.error('Error saving row:', error);\n    }\n  };\n\n  const handleTextChange = (id: GridRowId) => (e: ChangeEvent<HTMLInputElement>) => {\n    const newText = e.target.value;\n    setText((prev ) => ({\n      ...prev,\n      [id]: newText,\n    }));\n  };\n\n  const columns: GridColDef[] = [\n    {\n      field: 'image',\n      headerName: 'Фото',\n      headerClassName: 'super-app-theme--header',\n      renderCell: params => {\n        const { id } = params.row;\n        const preview = image[id]?.url || params.value;\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        return (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              gap: 5,\n              objectFit: 'contain',\n              margin: 0,\n            }}\n          >\n            <img\n              src={preview}\n              alt=\"Preview\"\n              style={{ maxWidth: '200px', height: 100 }}\n            />\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileChange(id)}\n              style={{ display: isInEditMode ? 'inline-block' : 'none' }}\n            />\n          </div>\n        );\n      },\n      width: 450,\n      align: 'center',\n      headerAlign: 'center',\n      editable: false,\n    },\n    {\n      field: 'text',\n      headerName: 'Текст',\n      headerClassName: 'super-app-theme--header',\n      // type: 'text',\n      width: 725,\n      align: 'center',\n      headerAlign: 'center',\n      editable: false,\n      renderCell: params => {\n        const { id } = params.row;\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        if (isInEditMode) {\n          return (\n            <StyledInput\n              type=\"text\"\n              defaultValue={params.value}\n              onChange={handleTextChange(id)}\n              onKeyDown={(e) => e.stopPropagation()}\n            />\n          );\n        }\n        return params.value;\n      },\n    },\n    {\n      field: 'actions',\n      headerClassName: 'super-app-theme--header',\n      type: 'actions',\n      width: 100,\n      align: 'center',\n      headerAlign: 'center',\n      cellClassName: 'actions',\n\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveOutlinedIcon />}\n              label=\"Save\"\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CloseOutlinedIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditOutlinedIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={openModalConfirm(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  return (\n    <Box\n      sx={{\n        height: 'auto',\n        width: '100%',\n        '& .super-app-theme--header': {\n          backgroundColor: 'background.primary',\n        },\n      }}\n    >\n      {open && (\n        <ModalConfirm\n          open={open}\n          handleClose={handleClose}\n          handleAction={handleDelete}\n          text={'Ви впевнені, що хочете видалити банер?'}\n        />\n      )}\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        disableColumnMenu={true}\n        disableColumnResize={true}\n        disableColumnSorting={true}\n        rowHeight={100}\n        rowSelection={false}\n        slots={{\n          pagination: () => (\n            <AddBannerButton  setRows={setRows}\n              setRowModesModel={setRowModesModel}/>\n          ) ,\n          noRowsOverlay: CustomNoRowsOverlay,\n        }}\n        sx={{\n          '& .MuiDataGrid-cell:hover': {\n            color: 'primary.main',\n          },\n          '--DataGrid-overlayHeight': '300px',\n        }}\n      />\n    </Box>\n  );\n};\n","import { Banners } from 'components/BannersPage/Banners';\nimport { useEffect } from 'react';\nimport { useTypedDispatch, useTypedSelector } from '../redux/hooks';\nimport { getHero } from '../redux/hero/heroOperations';\nimport { selectLoading } from '../redux/hero/heroSelectors';\nimport { CustomLoader } from 'components/Shared/CustomLoader/CustomLoader';\n\nconst BannersPage = () => {\nconst dispatch = useTypedDispatch();\n  const isLoading = useTypedSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(getHero());\n  }, [dispatch]);\n\n  return (\n    <>{isLoading ? <CustomLoader isLoading={isLoading} /> : <Banners />}</>\n  );\n};\n\nexport default BannersPage;\n"],"names":["ModalConfirm","_ref","open","handleClose","handleAction","text","_jsxs","Dialog","onClose","slotProps","backdrop","sx","backgroundColor","minWidth","gap","bgcolor","borderRadius","children","_jsx","DialogTitle","id","DialogActions","Button","onClick","color","StyledGridOverlay","styled","theme","display","flexDirection","alignItems","justifyContent","height","fill","palette","mode","fillOpacity","CustomNoRowsOverlay","width","viewBox","focusable","fillRule","transform","className","cx","cy","rx","ry","d","Box","mt","StyledInput","_templateObject","_taggedTemplateLiteral","selectHero","state","hero","items","selectLoading","isLoading","AddBannerButton","props","setRows","setRowModesModel","variant","startIcon","AddIcon","randomId","oldRows","concat","_toConsumableArray","image","isNew","oldModel","_objectSpread","_defineProperty","GridRowModes","fieldToFocus","marginRight","marginLeft","Banners","file","dispatch","useTypedDispatch","images","useTypedSelector","_useState","useState","_useState2","_slicedToArray","rowModesModel","_useState3","_useState4","setOpen","_useState5","_useState6","idToDelete","setIdToDelete","initialRows","map","_id","_useState7","_useState8","rows","openModalConfirm","handleCancelClick","ignoreModifications","handleEditClick","_useState9","_useState10","setImage","_useState11","_useState12","setText","handleFileChange","e","preventDefault","target","files","reader","FileReader","onloadend","url","result","readAsDataURL","handleSaveClick","_asyncToGenerator","_regeneratorRuntime","_callee","_image$id","_rows$find","newRow","formData","_context","prev","next","find","row","FormData","append","addHero","editHero","t0","console","error","stop","handleTextChange","newText","value","columns","field","headerName","headerClassName","renderCell","params","_image$id2","_rowModesModel$id","preview","isInEditMode","style","objectFit","margin","src","alt","maxWidth","type","accept","onChange","align","headerAlign","editable","_rowModesModel$id2","defaultValue","onKeyDown","stopPropagation","cellClassName","getActions","_ref3","_rowModesModel$id3","GridActionsCellItem","icon","SaveOutlinedIcon","label","CloseOutlinedIcon","EditOutlinedIcon","DeleteIcon","deleteHero","DataGrid","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","event","reason","GridRowEditStopReasons","defaultMuiPrevented","disableColumnMenu","disableColumnResize","disableColumnSorting","rowHeight","rowSelection","slots","pagination","noRowsOverlay","useEffect","getHero","_Fragment","CustomLoader"],"sourceRoot":""}