{"version":3,"file":"static/js/974.c8af2959.chunk.js","mappings":"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","sources":["components/Modals/ModalConfirm/ModalConfirm.jsx","components/Shared/NoRowsOverlay/NoRowsOverlay.jsx","redux/promoCodes/promoCodesSelectors.js","components/PromoCodesPage/PromoCodesTable.jsx","pages/PromoCodesPage.jsx"],"sourcesContent":["import { Button, Dialog, DialogActions, DialogTitle } from '@mui/material';\n\nexport const ModalConfirm = ({ open, handleClose, handleAction, text }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      slotProps={{\n        backdrop: {\n          sx: {\n            backgroundColor: 'rgba(0, 0, 0, 0.75)',\n          },\n        },\n      }}\n      sx={{\n        '& .MuiDialog-paper': {\n          minWidth: '400px',\n          gap: '10px',\n          bgcolor: 'secondary.main',\n          borderRadius: '18px',\n        },\n      }}\n    >\n      <DialogTitle id=\"alert-dialog-title\">{text}</DialogTitle>\n      <DialogActions>\n        <Button\n          onClick={handleAction}\n          sx={{\n            color: 'text.primary',\n            '&:hover': { color: 'hoverColor.main' },\n          }}\n        >\n          Підтвердити\n        </Button>\n        <Button\n          onClick={handleClose}\n          sx={{\n            color: 'text.primary',\n            '&:hover': { color: 'hoverColor.main' },\n          }}\n        >\n          Скасувати\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { styled } from '@mui/material/styles';\nimport { Box } from '@mui/material';\n\nconst StyledGridOverlay = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  height: '100%',\n  '& .ant-empty-img-1': {\n    fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626',\n  },\n  '& .ant-empty-img-2': {\n    fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959',\n  },\n  '& .ant-empty-img-3': {\n    fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343',\n  },\n  '& .ant-empty-img-4': {\n    fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c',\n  },\n  '& .ant-empty-img-5': {\n    fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\n    fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff',\n  },\n}));\n\nexport const CustomNoRowsOverlay = () => {\n  return (\n    <StyledGridOverlay>\n      <svg\n        width=\"120\"\n        height=\"100\"\n        viewBox=\"0 0 184 152\"\n        aria-hidden\n        focusable=\"false\"\n      >\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g transform=\"translate(24 31.67)\">\n            <ellipse\n              className=\"ant-empty-img-5\"\n              cx=\"67.797\"\n              cy=\"106.89\"\n              rx=\"67.797\"\n              ry=\"12.668\"\n            />\n            <path\n              className=\"ant-empty-img-1\"\n              d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\n            />\n            <path\n              className=\"ant-empty-img-2\"\n              d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\n            />\n            <path\n              className=\"ant-empty-img-3\"\n              d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\n            />\n          </g>\n          <path\n            className=\"ant-empty-img-3\"\n            d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\n          />\n          <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\n            <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\n            <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\n          </g>\n        </g>\n      </svg>\n      <Box sx={{ mt: 1 }}>Немає даних</Box>\n    </StyledGridOverlay>\n  );\n};\n","export const selectPromoCodesIsLoading = state => state.promoCodes.isLoading;\nexport const selectPromoCodesError = state => state.promoCodes.error;\nexport const selectPromoCodes = state => state.promoCodes.promoCodes;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useMemo, useState } from 'react';\nimport { selectPromoCodes } from '../../redux/promoCodes/promoCodesSelectors';\nimport {\n  addPromoCode,\n  deletePromoCode,\n  updatePromoCode,\n} from '../../redux/promoCodes/promoCodesOperations';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport { CustomNoRowsOverlay } from 'components/Shared/NoRowsOverlay/NoRowsOverlay';\nimport { Box, Button } from '@mui/material';\nimport {\n  DataGrid,\n  GridToolbar,\n  GridPagination,\n  GridRowModes,\n  GridActionsCellItem,\n  useGridApiRef,\n  gridClasses,\n} from '@mui/x-data-grid';\nimport { randomId } from '@mui/x-data-grid-generator';\nimport { ModalConfirm } from 'components/Modals/ModalConfirm/ModalConfirm';\nimport toast from 'react-hot-toast';\n\nexport const PromoCodesTable = () => {\n  const [open, setOpen] = useState(false);\n  const [idToDelete, setIdToDelete] = useState();\n  const apiRef = useGridApiRef();\n  const dispatch = useDispatch();\n  const promoCodes = useSelector(selectPromoCodes);\n  const [rowModesModel, setRowModesModel] = useState({});\n\n  const autosizeOptions = useMemo(\n    () => ({\n      includeHeaders: true,\n      includeOutliers: true,\n      expand: true,\n    }),\n    []\n  );\n\n  useEffect(() => {\n    if (apiRef.current) {\n      apiRef.current.autosizeColumns(autosizeOptions);\n    }\n  }, [apiRef, autosizeOptions, promoCodes, rowModesModel]);\n\n  const initialRows = useMemo(\n    () =>\n      promoCodes.map(el => ({\n        id: el._id,\n        promoCode: el.name,\n        discount: el.discount,\n        valid: el.valid,\n        createdAt: el.createdAt,\n      })),\n    [promoCodes]\n  );\n\n  const [rows, setRows] = useState(initialRows);\n\n  const processRowUpdate = newRow => {\n    if (newRow.discount > 100) {\n      return toast.error('Знижка повинна бути менше 100%');\n    }\n\n    if (newRow.discount < 1) {\n      return toast.error('Знижка повинна бути більшою за 0');\n    }\n\n    const updatedRow = { ...newRow, isNew: false };\n    setRows(rows.map(row => (row.id === newRow.id ? updatedRow : row)));\n\n    const newPromoData = {\n      name: newRow.promoCode,\n      discount: newRow.discount,\n      valid: newRow.valid,\n    };\n\n    if (rows.find(row => row.id === newRow.id && row.promoCode === '')) {\n      dispatch(addPromoCode(newPromoData));\n    } else {\n      dispatch(updatePromoCode({ id: newRow.id, promoData: newPromoData }));\n    }\n\n    return updatedRow;\n  };\n\n  const columns = [\n    {\n      field: 'promoCode',\n      headerName: 'Промокод',\n      headerClassName: 'super-app-theme--header',\n      align: 'center',\n      headerAlign: 'center',\n      editable: true,\n    },\n    {\n      field: 'discount',\n      headerName: 'Знижка, %',\n      headerClassName: 'super-app-theme--header',\n      type: 'number',\n      align: 'center',\n      headerAlign: 'center',\n      editable: true,\n    },\n    {\n      field: 'valid',\n      headerName: 'Активний',\n      headerClassName: 'super-app-theme--header',\n      type: 'boolean',\n      editable: true,\n    },\n    {\n      field: 'createdAt',\n      headerName: 'Дата додавання',\n      headerClassName: 'super-app-theme--header',\n      type: 'date',\n      align: 'center',\n      headerAlign: 'center',\n      valueFormatter: value => {\n        if (value == null) {\n          return '';\n        }\n        return `${value.toLocaleString().slice(0, 10)}`;\n      },\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: '',\n      headerClassName: 'super-app-theme--header',\n      cellClassName: 'actions',\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveOutlinedIcon />}\n              label=\"Save\"\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CloseOutlinedIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditOutlinedIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={handleDeleteClick(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  const handleEditClick = id => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.Edit },\n    });\n  };\n\n  const handleSaveClick = id => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View },\n    });\n  };\n\n  const handleCancelClick = id => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n\n    const editedRow = rows.find(row => row.id === id);\n    if (editedRow.isNew) {\n      setRows(rows.filter(row => row.id !== id));\n    }\n  };\n\n  const handleDeleteClick = id => () => {\n    setOpen(true);\n    setIdToDelete(id);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const deleteItem = () => {\n    dispatch(deletePromoCode(idToDelete));\n  };\n\n  const CustomFooter = props => {\n    const { setRows, setRowModesModel } = props;\n\n    const handleClick = () => {\n      const id = randomId();\n      setRows(oldRows => [\n        {\n          id,\n          promoCode: '',\n          discount: '',\n          valid: true,\n          createdAt: '',\n          isNew: true,\n        },\n        ...oldRows,\n      ]);\n      setRowModesModel(oldModel => ({\n        ...oldModel,\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: 'promoCode' },\n      }));\n    };\n\n    return (\n      <>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleClick}\n          sx={{\n            marginLeft: '10px',\n            marginRight: 'auto',\n            '&:hover': {\n              backgroundColor: 'primary.main',\n            },\n          }}\n        >\n          Додати промокод\n        </Button>\n        <GridPagination />\n      </>\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        '& .super-app-theme--header': {\n          backgroundColor: 'background.primary',\n        },\n        [`.${gridClasses.cell}.yes`]: {\n          '& .MuiSvgIcon-root': {\n            color: 'success.main',\n          },\n        },\n        [`.${gridClasses.cell}.no`]: {\n          '& .MuiSvgIcon-root': {\n            color: 'error.main',\n          },\n        },\n      }}\n    >\n      <ModalConfirm\n        open={open}\n        handleClose={handleClose}\n        handleAction={deleteItem}\n        text=\"Ви впевнені, що хочете видалити промокод?\"\n      />\n      <DataGrid\n        autoHeight\n        apiRef={apiRef}\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        processRowUpdate={processRowUpdate}\n        autosizeOnMount={true}\n        autosizeOptions={autosizeOptions}\n        pageSizeOptions={[10, 25, 100]}\n        hideFooterSelectedRowCount\n        slots={{\n          toolbar: GridToolbar,\n          pagination: CustomFooter,\n          noRowsOverlay: CustomNoRowsOverlay,\n        }}\n        slotProps={{\n          toolbar: {\n            showQuickFilter: true,\n          },\n          pagination: { setRows, setRowModesModel },\n        }}\n        initialState={{\n          pagination: { paginationModel: { pageSize: 10 } },\n        }}\n        getCellClassName={params => {\n          if (params.field === 'valid') {\n            if (params.value === true) {\n              return 'yes';\n            } else {\n              return 'no';\n            }\n          }\n          return '';\n        }}\n        sx={{\n          '& .MuiDataGrid-cell:hover': {\n            color: 'primary.main',\n          },\n          '--DataGrid-overlayHeight': '300px',\n        }}\n      />\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPromoCodes } from '../redux/promoCodes/promoCodesOperations';\nimport { selectPromoCodesIsLoading } from '../redux/promoCodes/promoCodesSelectors';\nimport { CustomLoader } from 'components/Shared/CustomLoader/CustomLoader';\nimport { PromoCodesTable } from 'components/PromoCodesPage/PromoCodesTable';\n\nconst PromoCodesPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectPromoCodesIsLoading);\n\n  useEffect(() => {\n    dispatch(getPromoCodes());\n  }, [dispatch]);\n\n  return <>{isLoading ? <CustomLoader /> : <PromoCodesTable />}</>;\n};\n\nexport default PromoCodesPage;\n"],"names":["ModalConfirm","_ref","open","handleClose","handleAction","text","_jsxs","Dialog","onClose","slotProps","backdrop","sx","backgroundColor","minWidth","gap","bgcolor","borderRadius","children","_jsx","DialogTitle","id","DialogActions","Button","onClick","color","StyledGridOverlay","styled","theme","display","flexDirection","alignItems","justifyContent","height","fill","palette","mode","fillOpacity","CustomNoRowsOverlay","width","viewBox","focusable","fillRule","transform","className","cx","cy","rx","ry","d","Box","mt","selectPromoCodesIsLoading","state","promoCodes","isLoading","selectPromoCodes","PromoCodesTable","_ref2","_useState","useState","_useState2","_slicedToArray","setOpen","_useState3","_useState4","idToDelete","setIdToDelete","apiRef","useGridApiRef","dispatch","useDispatch","useSelector","_useState5","_useState6","rowModesModel","setRowModesModel","autosizeOptions","useMemo","includeHeaders","includeOutliers","expand","useEffect","current","autosizeColumns","initialRows","map","el","_id","promoCode","name","discount","valid","createdAt","_useState7","_useState8","rows","setRows","columns","field","headerName","headerClassName","align","headerAlign","editable","type","valueFormatter","value","concat","toLocaleString","slice","cellClassName","getActions","_rowModesModel$id","GridRowModes","GridActionsCellItem","icon","SaveOutlinedIcon","label","handleSaveClick","CloseOutlinedIcon","handleCancelClick","EditOutlinedIcon","handleEditClick","DeleteIcon","handleDeleteClick","_objectSpread","_defineProperty","ignoreModifications","find","row","isNew","filter","gridClasses","deletePromoCode","DataGrid","autoHeight","editMode","processRowUpdate","newRow","toast","updatedRow","newPromoData","addPromoCode","updatePromoCode","promoData","autosizeOnMount","pageSizeOptions","hideFooterSelectedRowCount","slots","toolbar","GridToolbar","pagination","props","_Fragment","variant","startIcon","AddIcon","randomId","oldRows","_toConsumableArray","oldModel","fieldToFocus","marginLeft","marginRight","GridPagination","noRowsOverlay","showQuickFilter","initialState","paginationModel","pageSize","getCellClassName","params","getPromoCodes","CustomLoader"],"sourceRoot":""}