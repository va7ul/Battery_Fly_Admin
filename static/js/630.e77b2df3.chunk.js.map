{"version":3,"file":"static/js/630.e77b2df3.chunk.js","mappings":"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","sources":["components/Banners/Banners.styled.js","redux/hero/heroSelectors.js","components/Banners/Banners.jsx","pages/BannersPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n  width: 100%;\n  height: 100%;\n  background: inherit;\n  border: none;\n  outline: none;\n`;\n","export const selectHero = state => state.hero.items;\nexport const selectLoading = state => state.hero.isLoading;\nexport const selectError = state => state.hero.error;\n","import { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport { StyledInput } from './Banners.styled';\nimport {\n  GridRowModes,\n  DataGrid,\n  GridActionsCellItem,\n  GridRowEditStopReasons,\n} from '@mui/x-data-grid';\nimport { Button } from '@mui/material';\nimport { randomId } from '@mui/x-data-grid-generator';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteHero, editHero, addHero } from '../../redux/hero/heroOperations';\nimport { selectHero } from '../../redux/hero/heroSelectors';\n\nexport const Banners = () => {\n  const dispatch = useDispatch();\n  const images = useSelector(selectHero);\n  const [rowModesModel, setRowModesModel] = useState({});\n\n  const initialRows = images.map(({ _id, image, text }) => ({\n    id: _id,\n    image,\n    text,\n  }));\n\n  const [rows, setRows] = useState(initialRows);\n  const handleRowEditStop = (params, event) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const handleDelete = id => () => {\n    dispatch(deleteHero(id));\n  };\n\n  const handleCancelClick = id => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n  };\n\n  const handleEditClick = id => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleRowModesModelChange = newRowModesModel => {\n    setRowModesModel(newRowModesModel);\n  };\n\n  const [image, setImage] = useState('');\n  const [text, setText] = useState('');\n\n  const handleFileChange = id => e => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImage({ [id]: { url: reader.result, file } });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSaveClick = id => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n    const newRow = rows.find(row => row.isNew === true && row.text === '');\n    const formData = new FormData();\n    if (image[id]?.file) {\n      formData.append('image', image[id].file);\n    }\n    formData.append('text', text[id] || rows.find(row => row.id === id).text);\n    try {\n      if (newRow) {\n        dispatch(addHero(formData));\n      } else {\n        dispatch(editHero({ id, formData }));\n      }\n    } catch (error) {\n      console.error(`error`, error.message);\n    }\n  };\n\n  const handleTextChange = id => e => {\n    const newText = e.target.value;\n    setText(prev => ({\n      ...prev,\n      [id]: newText,\n    }));\n  };\n\n  const columns = [\n    {\n      field: 'image',\n      headerName: 'Фото',\n      type: 'image',\n      renderCell: params => {\n        const { id } = params.row;\n        const preview = image[id]?.url || params.value;\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        return (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              gap: 5,\n              objectFit: 'contain',\n              margin: 0,\n            }}\n          >\n            <img\n              src={preview}\n              alt=\"Preview\"\n              style={{ maxWidth: '200px', height: 100 }}\n            />\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileChange(id)}\n              style={{ display: isInEditMode ? 'inline-block' : 'none' }}\n            />\n          </div>\n        );\n      },\n      width: 450,\n      align: 'center',\n      headerAlign: 'center',\n      editable: false,\n    },\n    {\n      field: 'text',\n      headerName: 'Текст',\n      type: 'text',\n      width: 725,\n      align: 'center',\n      headerAlign: 'center',\n      editable: false,\n      renderCell: params => {\n        const { id } = params.row;\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        if (isInEditMode) {\n          return (\n            <StyledInput\n              type=\"text\"\n              defaultValue={params.value}\n              onChange={handleTextChange(id)}\n              onKeyDown={e => e.stopPropagation()}\n            />\n          );\n        }\n        return params.value;\n      },\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      width: 100,\n      align: 'center',\n      headerAlign: 'center',\n      cellClassName: 'actions',\n\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveOutlinedIcon />}\n              label=\"Save\"\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CloseOutlinedIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditOutlinedIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={handleDelete(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  const AddBannerButton = props => {\n    const { setRows, setRowModesModel } = props;\n\n    const handleClick = () => {\n      const id = randomId();\n      setRows(oldRows => [\n        ...oldRows,\n        { id, image: '', text: '', isNew: true },\n      ]);\n      setRowModesModel(oldModel => ({\n        ...oldModel,\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: 'text' },\n      }));\n    };\n\n    return (\n      <Button\n        variant=\"contained\"\n        startIcon={<AddIcon />}\n        onClick={handleClick}\n        sx={{\n          marginRight: 'auto',\n          marginLeft: '10px',\n          '&:hover': {\n            backgroundColor: 'primary.main',\n          },\n        }}\n      >\n        Додати банер\n      </Button>\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        height: 'auto',\n        width: '100%',\n        '& .actions': {\n          color: 'text.primary',\n        },\n        '& .textPrimary': {\n          color: 'text.primary',\n        },\n      }}\n    >\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        disableColumnMenu={true}\n        disableColumnResize={true}\n        disableColumnSorting={true}\n        rowHeight={100}\n        rowSelection={false}\n        autoHeight\n        slots={{\n          pagination: AddBannerButton,\n        }}\n        slotProps={{\n          pagination: { setRows, setRowModesModel },\n        }}\n      />\n    </Box>\n  );\n};\n","import { Banners } from 'components/Banners/Banners';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getHero } from '../redux/hero/heroOperations';\nimport { selectLoading } from '../redux/hero/heroSelectors';\nimport { CustomLoader } from 'components/Shared/CustomLoader/CustomLoader';\n\nconst BannersPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(getHero());\n  }, [dispatch]);\n\n  return (\n    <>{isLoading ? <CustomLoader isLoading={isLoading} /> : <Banners />}</>\n  );\n};\n\nexport default BannersPage;\n"],"names":["StyledInput","styled","_templateObject","_taggedTemplateLiteral","selectHero","state","hero","items","selectLoading","isLoading","Banners","dispatch","useDispatch","images","useSelector","_useState","useState","_useState2","_slicedToArray","rowModesModel","setRowModesModel","initialRows","map","_ref","id","_id","image","text","_useState3","_useState4","rows","setRows","handleDelete","deleteHero","handleCancelClick","_objectSpread","_defineProperty","mode","GridRowModes","ignoreModifications","handleEditClick","_useState5","_useState6","setImage","_useState7","_useState8","setText","handleFileChange","e","preventDefault","file","target","files","reader","FileReader","onloadend","url","result","readAsDataURL","handleSaveClick","_image$id","newRow","find","row","isNew","formData","FormData","append","addHero","editHero","error","console","message","handleTextChange","newText","value","prev","columns","field","headerName","type","renderCell","params","_image$id2","_rowModesModel$id","preview","isInEditMode","_jsxs","style","display","alignItems","justifyContent","gap","objectFit","margin","children","_jsx","src","alt","maxWidth","height","accept","onChange","width","align","headerAlign","editable","_rowModesModel$id2","defaultValue","onKeyDown","stopPropagation","cellClassName","getActions","_ref2","_rowModesModel$id3","GridActionsCellItem","icon","SaveOutlinedIcon","label","sx","color","onClick","CloseOutlinedIcon","className","EditOutlinedIcon","DeleteIcon","Box","DataGrid","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","event","reason","GridRowEditStopReasons","defaultMuiPrevented","disableColumnMenu","disableColumnResize","disableColumnSorting","rowHeight","rowSelection","autoHeight","slots","pagination","props","Button","variant","startIcon","AddIcon","randomId","oldRows","concat","_toConsumableArray","oldModel","fieldToFocus","marginRight","marginLeft","backgroundColor","slotProps","useEffect","getHero","_Fragment","CustomLoader"],"sourceRoot":""}