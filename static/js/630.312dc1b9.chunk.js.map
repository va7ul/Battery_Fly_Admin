{"version":3,"file":"static/js/630.312dc1b9.chunk.js","mappings":"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","sources":["components/Banners/Banners.styled.js","redux/hero/heroSelectors.js","components/Banners/Banners.jsx","pages/BannersPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n  width: 100%;\n  height: 100%;\n  background: inherit;\n  border: none;\n  outline: none;\n`;\n","export const selectHero = state => state.hero.items;\n","import { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport { StyledInput } from './Banners.styled';\nimport {\n  GridRowModes,\n  DataGrid,\n  GridActionsCellItem,\n  GridRowEditStopReasons,\n  GridToolbarContainer,\n} from '@mui/x-data-grid';\nimport { Button } from '@mui/material';\nimport { randomId } from '@mui/x-data-grid-generator';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getHero,\n  deleteHero,\n  editHero,\n  addHero,\n} from '../../redux/hero/heroOperations';\nimport { selectHero } from '../../redux/hero/heroSelectors';\n\nexport const Banners = () => {\n  const dispatch = useDispatch();\n  const images = useSelector(selectHero);\n  const [rows, setRows] = useState([]);\n  const [rowModesModel, setRowModesModel] = useState({});\n\n  useEffect(() => {\n    const getHeroImagesSync = async () => {\n      try {\n        dispatch(getHero());\n      } catch (error) {\n        console.log('error', error.message);\n      }\n    };\n    getHeroImagesSync();\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (images) {\n      const initialRows = images.map(({ _id, image, text }) => ({\n        id: _id,\n        image,\n        text,\n      }));\n      setRows(initialRows);\n    }\n  }, [images]);\n\n  // const processRowUpdate = newRow => {\n  //   const updatedRow = { ...newRow, isNew: false };\n  //   setRows(rows.map(row => (row.id === newRow.id ? updatedRow : row)));\n\n  //   const newPromoData = {\n  //     name: newRow.promoCode,\n  //     discount: newRow.discount,\n  //     valid: newRow.valid,\n  //   };\n\n  //   if (rows.find(row => row.id === newRow.id && row.promoCode === '')) {\n  //     dispatch(addHero(newPromoData));\n  //   }\n\n  //   return updatedRow;\n  // };\n\n  const handleRowEditStop = (params, event) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const handleDelete = id => () => {\n    dispatch(deleteHero(id));\n  };\n\n  const handleCancelClick = id => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n  };\n\n  const handleEditClick = id => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleRowModesModelChange = newRowModesModel => {\n    setRowModesModel(newRowModesModel);\n  };\n\n  const EditToolbar = props => {\n    const { setRows, setRowModesModel } = props;\n\n    const handleClick = () => {\n      const id = randomId();\n      setRows(oldRows => [\n        ...oldRows,\n        { id, image: '', text: '', isNew: true },\n      ]);\n      setRowModesModel(oldModel => ({\n        ...oldModel,\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: 'text' },\n      }));\n    };\n\n    return (\n      <GridToolbarContainer>\n        <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n          Add record\n        </Button>\n      </GridToolbarContainer>\n    );\n  };\n\n  const [image, setImage] = useState('');\n  const [text, setText] = useState('');\n\n  const handleFileChange = id => e => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImage({ [id]: { url: reader.result, file } });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSaveClick = id => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n    const newRow = rows.find(row => row.isNew === true && row.text === '');\n    const formData = new FormData();\n    if (image[id]?.file) {\n      console.log(image[id]?.file);\n      formData.append('image', image[id].file);\n    }\n    formData.append('text', text[id] || rows.find(row => row.id === id).text);\n    try {\n      if (newRow) {\n        console.log('newRow', newRow);\n        dispatch(addHero(formData));\n      } else {\n        dispatch(editHero({ id, formData }));\n      }\n    } catch (error) {\n      console.error(`jopa`, error.message);\n    }\n  };\n\n  const handleTextChange = id => e => {\n    const newText = e.target.value;\n    setText(prev => ({\n      ...prev,\n      [id]: newText,\n    }));\n  };\n\n  const columns = [\n    {\n      field: 'image',\n      headerName: 'Image',\n      type: 'image',\n      renderCell: params => {\n        const { id } = params.row;\n        const preview = image[id]?.url || params.value;\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        return (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              gap: 5,\n              objectFit: 'contain',\n              margin: 0,\n            }}\n          >\n            <img\n              src={preview}\n              alt=\"Preview\"\n              style={{ maxWidth: '200px', height: 100 }}\n            />\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileChange(id)}\n              style={{ display: isInEditMode ? 'inline-block' : 'none' }}\n            />\n          </div>\n        );\n      },\n      width: 500,\n      align: 'center',\n      headerAlign: 'center',\n      editable: false,\n    },\n    {\n      field: 'text',\n      headerName: 'Text',\n      type: 'text',\n      width: 670,\n      align: 'center',\n      headerAlign: 'center',\n      editable: false,\n      renderCell: params => {\n        const { id } = params.row;\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        if (isInEditMode) {\n          return (\n            <StyledInput\n              type=\"text\"\n              defaultValue={params.value}\n              onChange={handleTextChange(id)}\n            />\n          );\n        }\n        return params.value;\n      },\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      width: 100,\n      align: 'center',\n      headerAlign: 'center',\n      headerName: 'Actions',\n      cellClassName: 'actions',\n\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveOutlinedIcon />}\n              label=\"Save\"\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CloseOutlinedIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditOutlinedIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={handleDelete(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  return (\n    <Box\n      sx={{\n        height: 'auto',\n        width: '100%',\n        '& .actions': {\n          color: 'text.primary',\n        },\n        '& .textPrimary': {\n          color: 'text.primary',\n        },\n      }}\n    >\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        // processRowUpdate={processRowUpdate}\n        disableColumnMenu={true}\n        disableColumnResize={true}\n        disableColumnSorting={true}\n        hideFooter={true}\n        hideFooterPagination={true}\n        rowHeight={100}\n        autoHeight\n        slots={{\n          toolbar: EditToolbar,\n        }}\n        slotProps={{\n          toolbar: { setRows, setRowModesModel },\n        }}\n      />\n    </Box>\n  );\n};\n","import { Banners } from 'components/Banners/Banners';\n\nconst BannersPage = () => {\n  return <Banners />;\n};\n\nexport default BannersPage;\n"],"names":["StyledInput","styled","_templateObject","_taggedTemplateLiteral","selectHero","state","hero","items","Banners","dispatch","useDispatch","images","useSelector","_useState","useState","_useState2","_slicedToArray","rows","setRows","_useState3","_useState4","rowModesModel","setRowModesModel","useEffect","getHeroImagesSync","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","getHero","error","console","log","message","stop","apply","arguments","initialRows","map","_ref2","id","_id","image","text","handleDelete","deleteHero","handleCancelClick","_objectSpread","_defineProperty","mode","GridRowModes","ignoreModifications","handleEditClick","_useState5","_useState6","setImage","_useState7","_useState8","setText","handleFileChange","e","preventDefault","file","target","files","reader","FileReader","onloadend","url","result","readAsDataURL","handleSaveClick","_image$id","_image$id2","newRow","find","row","isNew","formData","FormData","append","addHero","editHero","handleTextChange","newText","value","columns","field","headerName","type","renderCell","params","_image$id3","_rowModesModel$id","preview","isInEditMode","_jsxs","style","display","alignItems","justifyContent","gap","objectFit","margin","children","_jsx","src","alt","maxWidth","height","accept","onChange","width","align","headerAlign","editable","_rowModesModel$id2","defaultValue","cellClassName","getActions","_ref3","_rowModesModel$id3","GridActionsCellItem","icon","SaveOutlinedIcon","label","sx","color","onClick","CloseOutlinedIcon","className","EditOutlinedIcon","DeleteIcon","Box","DataGrid","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","event","reason","GridRowEditStopReasons","defaultMuiPrevented","disableColumnMenu","disableColumnResize","disableColumnSorting","hideFooter","hideFooterPagination","rowHeight","autoHeight","slots","toolbar","props","GridToolbarContainer","Button","startIcon","AddIcon","randomId","oldRows","concat","_toConsumableArray","oldModel","fieldToFocus","slotProps"],"sourceRoot":""}